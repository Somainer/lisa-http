(import! helpers/pipe-macro)
(import! helpers/uuid)
(import! helpers/match)
(import! helpers/refresh-js-code)

(define-macro (rewire-fn from to)
  (define sym (gen-sym))
  `'(group!
      (define ~sym ~from)
      (define ~from ())
      (define ~from (~to ~sym))))

(define-macro (rewire-lisa-http fn)
  `'(group!
      (~rewire-fn lisa-http ~fn)
      (~rewire-fn make-server ~fn)))

(define (clear-package-cache paths)
  (define importer moe.roselia.lisa.Import.PackageImporter$/MODULE$)
  (define package-cache (.packageCache importer))
  (.foreach paths
    &(.remove package-cache (.toString #))))

(define version-path "/:rhodonite/:version")
(define refresh-js-code (refresh-js-code version-path))

(define (run-debug-server file)
  (println! "Starting debug server...")
  (define-mutable! -servers)
  (define (register-server make)
    (lambda confs
      (define server (make ...confs))
      (set! -servers (cons server -servers))
      server))
  (import! lisa-http)
  (define -html html.html)
  (define (html.html ...args)
    (-html ...args
      (html.script
        refresh-js-code)))
  (define (stop-servers)
    (.foreach -servers stop-server)
    (set! -servers ()))
  (rewire-lisa-http register-server)
  (define lisa-http/run ())
  (define (lisa-http/run ...confs)
    (|> (lisa-http ...confs)
      (start-server)))
  (define parent (.getParentFile file))
  (define parent-path (.toPath parent))
  (define watch-service (.newWatchService java.nio.file.FileSystems/getDefault))
  (|> parent-path
    (.register watch-service
      (.toNativeArray 
        (list
          java.nio.file.StandardWatchEventKinds/ENTRY_MODIFY
          java.nio.file.StandardWatchEventKinds/ENTRY_CREATE))))
  (define-mutable! should-reload)
  (define-mutable! should-quit)
  (set! should-reload false)
  (set! should-quit false)
  (define-mutable! state-version)
  (define (refresh-version)
    (set! state-version (random-uuid)))
  (|> 
    (new Thread
      (lambda ()
        (println! "Hot reload debug server created...")
        (input "Enter to quit...")
        (set! should-quit true)))
    .start)
  (define (loop ())
    (println! "Stopping server...")
    (stop-servers)
    (quit 0))
  (define (loop :reload)
    (loop :start))
  (define (loop :start)
    (define status (returnable
      (lambda (return)
        (set! should-reload false)
        (load! (.getPath file))
        (refresh-version)
        (match -servers
          ((server)
            (->> server
              (set-router "/:rhodonite"
                (make-router
                  (make-routes!
                    (`version-path` state-version))))))
          (_ ; Multiple servers or no server, ignore. 
            ()))
        (while true
          (let ((key (.poll watch-service)))
            (define events (if (= key null) () (from-java (.pollEvents key))))
            (clear-package-cache (map events &(.resolve parent-path (|> # .context .toAbsolutePath))))
            (if
              (.exists events
                &(|> #
                    .context
                    .toFile
                    .getName
                    (.endsWith ".lisa")))
              (set! should-reload true))
            (if (not (= null key)) (.reset key))
            (if should-reload (return :reload))
            (if should-quit (return))
            (Thread/sleep (.asLong (wrap 1000))))))))
    (if (not (nil? status))
      (stop-servers))
    (loop status))
  (loop :start))
