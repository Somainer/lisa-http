(import! helpers/pipe-macro)
(import! helpers/match)
(import! response-handler)

(define (redirect-to path code)
  (lambda (context)
    (->> context
      write-common-headers
      (|>
        .getResponseHeaders
        (.add "Location" path))
      (.sendResponseHeaders code (.asLong (wrap -1)))
      .close)))
(define (redirect-to path)
  (redirect-to path :permanent))
(define (redirect-to path :permanent) (redirect-to path 301))
(define (redirect-to path :found) (redirect-to path 302))

(define (err code message)
  `'((:err ~code) ~message))
(define (bad-request message)
  (err 400 message))

(define (ok result)
  (list :ok result))

(define (response-file path context (when (string? path)))
  (response-file (new java.io.File path) context))
(define (response-file file context)
  (define path (.toPath file))
  (match file
    (file (when (and (.isFile file) (.canRead file)))
      (define content-type (java.nio.file.Files/probeContentType path))
      (define size (.length file))
      (->> context
        write-common-headers
        (|>
          .getResponseHeaders
          (.add "Content-Type" (if (= content-type null) "" content-type)))
        (.sendResponseHeaders 200 (.asLong (wrap size)))
        (|>
          .getResponseBody
          &(java.nio.file.Files/copy path #))
        .close))
    (_ (write-response context "404 Not Found" 404))))

(define (send-file path)
  (lambda (context)
    (response-file path context)))
